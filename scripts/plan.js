class PlanManager {
	constructor() {
		this.learningPlan = null
		this.init()
	}

	init() {
		this.loadLearningPlan()
		this.renderPlan()
	}

	loadLearningPlan() {
		const userData = JSON.parse(localStorage.getItem('userData'))

		if (userData && userData.learning_plan) {
			this.learningPlan = userData.learning_plan
		} else {
			this.learningPlan = {
				upcoming_courses: [
					{
						id: 5,
						title: '–û—Å–Ω–æ–≤—ã DevOps',
						scheduled_date: '2025-04-01',
						type: '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
						priority: '–≤—ã—Å–æ–∫–∏–π',
						description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ DevOps –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
						duration: '40 —á–∞—Å–æ–≤',
						category: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
					},
					{
						id: 6,
						title: 'Agile –º–µ—Ç–æ–¥–∏–∫–∏',
						scheduled_date: '2025-05-25',
						type: '—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π',
						priority: '—Å—Ä–µ–¥–Ω–∏–π',
						description: '–ò–∑—É—á–µ–Ω–∏–µ –≥–∏–±–∫–∏—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
						duration: '24 —á–∞—Å–∞',
						category: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
					},
					{
						id: 7,
						title: 'Cloud Computing',
						scheduled_date: '2025-06-10',
						type: '—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π',
						priority: '—Å—Ä–µ–¥–Ω–∏–π',
						description: '–†–∞–±–æ—Ç–∞ —Å –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏',
						duration: '36 —á–∞—Å–æ–≤',
						category: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
					},
					{
						id: 8,
						title: 'IT-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
						scheduled_date: '2025-07-01',
						type: '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
						priority: '–≤—ã—Å–æ–∫–∏–π',
						description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
						duration: '48 —á–∞—Å–æ–≤',
						category: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
					},
				],
				recommendations: [
					"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å 'Cloud Computing' –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
					"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ç—É–µ–º –∏–∑—É—á–∏—Ç—å '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'",
					"–î–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å–≤–æ–∏—Ç—å '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IT-–ø—Ä–æ–µ–∫—Ç–∞–º–∏'",
				],
				statistics: {
					total_planned: 4,
					completion_rate: 25,
					high_priority_count: 2,
					medium_priority_count: 2,
				},
			}

			if (userData) {
				userData.learning_plan = this.learningPlan
				localStorage.setItem('userData', JSON.stringify(userData))
			}
		}
	}

	renderPlan() {
		this.renderTimeline()
		this.renderRecommendations()
		this.renderStatistics()
	}

	renderTimeline() {
		const container = document.getElementById('coursesTimeline')
		if (!container || !this.learningPlan) return

		const coursesByMonth = this.groupCoursesByMonth(
			this.learningPlan.upcoming_courses
		)

		if (this.learningPlan.upcoming_courses.length === 0) {
			container.innerHTML =
				'<p class="text-center">–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</p>'
			return
		}

		let timelineHTML = ''

		Object.keys(coursesByMonth)
			.sort()
			.forEach(month => {
				timelineHTML += this.createMonthSection(month, coursesByMonth[month])
			})

		container.innerHTML = timelineHTML

		this.addCourseCardEventListeners()
	}

	groupCoursesByMonth(courses) {
		const groups = {}

		courses.forEach(course => {
			const date = new Date(course.scheduled_date)
			const monthKey = date
				.toLocaleDateString('ru-RU', {
					year: 'numeric',
					month: 'long',
				})
				.toUpperCase()

			if (!groups[monthKey]) {
				groups[monthKey] = []
			}
			groups[monthKey].push(course)
		})

		return groups
	}

	createMonthSection(month, courses) {
		return `
            <div class="timeline-month">
                <h3 class="month-title">${month}</h3>
                <div class="month-courses">
                    ${courses
											.map(course => this.createCourseCard(course))
											.join('')}
                </div>
            </div>
        `
	}

	createCourseCard(course) {
		const formattedDate = this.formatDate(course.scheduled_date)
		const priorityClass = `priority-${course.priority}`

		return `
            <div class="course-plan-card ${priorityClass}" data-course-id="${
			course.id
		}">
                <div class="course-plan-main">
                    <div class="course-plan-header">
                        <h4 class="course-plan-title">${course.title}</h4>
                        <div class="course-badges">
                            <span class="course-badge type-${
															course.type
														}">${this.getTypeText(course.type)}</span>
                            <span class="course-badge priority-${
															course.priority
														}">${this.getPriorityText(course.priority)}</span>
                        </div>
                    </div>
                    <p class="course-plan-description">${course.description}</p>
                    <div class="course-plan-meta">
                        <span class="meta-item">üìÖ ${formattedDate}</span>
                        <span class="meta-item">‚è±Ô∏è ${course.duration}</span>
                        <span class="meta-item">üìö ${course.category}</span>
                    </div>
                </div>
                <button class="btn btn-outline add-to-calendar" data-course-id="${
									course.id
								}">
                    üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                </button>
            </div>
        `
	}

	renderRecommendations() {
		const container = document.getElementById('recommendationsList')
		if (!container || !this.learningPlan) return

		if (this.learningPlan.recommendations.length === 0) {
			container.innerHTML =
				'<p class="text-center">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>'
			return
		}

		container.innerHTML = this.learningPlan.recommendations
			.map(
				rec => `
            <div class="recommendation-item">
                <div class="recommendation-icon">üí°</div>
                <div class="recommendation-text">${rec}</div>
            </div>
        `
			)
			.join('')
	}

	renderStatistics() {
		if (!this.learningPlan || !this.learningPlan.statistics) return

		const stats = this.learningPlan.statistics

		document.getElementById('plannedCourses').textContent = stats.total_planned
		document.getElementById(
			'completionRate'
		).textContent = `${stats.completion_rate}%`

		const avgPriority = this.calculateAveragePriority(stats)
		document.getElementById('avgPriority').textContent = avgPriority
	}

	calculateAveragePriority(stats) {
		const total = stats.high_priority_count + stats.medium_priority_count
		if (total === 0) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

		const score =
			(stats.high_priority_count * 3 + stats.medium_priority_count * 2) / total

		if (score >= 2.5) return '–í—ã—Å–æ–∫–∏–π'
		if (score >= 1.5) return '–°—Ä–µ–¥–Ω–∏–π'
		return '–ù–∏–∑–∫–∏–π'
	}

	addCourseCardEventListeners() {
		document.querySelectorAll('.course-plan-card').forEach(card => {
			card.addEventListener('click', e => {
				if (!e.target.classList.contains('add-to-calendar')) {
					const courseId = card.dataset.courseId
					this.viewCourseDetails(courseId)
				}
			})
		})

		document.querySelectorAll('.add-to-calendar').forEach(btn => {
			btn.addEventListener('click', e => {
				e.stopPropagation()
				const courseId = btn.dataset.courseId
				this.addToCalendar(courseId)
			})
		})
	}

	viewCourseDetails(courseId) {
		const course = this.learningPlan.upcoming_courses.find(
			c => c.id == courseId
		)
		if (course) {
			alert(
				`–î–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞: ${course.title}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${
					course.description
				}\n–î–∞—Ç–∞: ${this.formatDate(
					course.scheduled_date
				)}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(course.priority)}`
			)
		}
	}

	addToCalendar(courseId) {
		const course = this.learningPlan.upcoming_courses.find(
			c => c.id == courseId
		)
		if (course) {
			if (typeof NotificationManager !== 'undefined') {
				NotificationManager.showTempNotification(
					`–ö—É—Ä—Å "${course.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å`,
					'info'
				)
			} else {
				alert(`–ö—É—Ä—Å "${course.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!`)
			}
		}
	}

	formatDate(dateString) {
		const date = new Date(dateString)
		return date.toLocaleDateString('ru-RU')
	}

	getTypeText(type) {
		const types = {
			–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
			—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π',
		}
		return types[type] || type
	}

	getPriorityText(priority) {
		const priorities = {
			–≤—ã—Å–æ–∫–∏–π: '–í—ã—Å–æ–∫–∏–π',
			—Å—Ä–µ–¥–Ω–∏–π: '–°—Ä–µ–¥–Ω–∏–π',
			–Ω–∏–∑–∫–∏–π: '–ù–∏–∑–∫–∏–π',
		}
		return priorities[priority] || priority
	}
}
